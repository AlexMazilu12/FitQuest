plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id "org.sonarqube" version "5.1.0.4882"
    id 'jacoco'
    id 'org.flywaydb.flyway' version '9.0.0'
}

jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.required = true
        xml.outputLocation.set(file("build/jacoco/jacocoTestReport.xml"))
    }
}


plugins.withType(JacocoPlugin) {
    tasks["test"].finalizedBy 'jacocoTestReport'
}

flyway {
    url = 'jdbc:mysql://localhost:3306/fitquest_db'
    user = 'root'
    password = 'my-secret-pw'
    locations = ['classpath:db/migration']
}

sonar {
    properties {
        property "sonar.projectKey", "FitQuest"
        property "sonar.projectName", "FitQuest"
        property "sonar.host.url", "http://127.0.0.1:9000"
        property "sonar.organization", "DevOpsHint"
        property "sonar.qualitygate.wait", true
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/jacoco/jacocoTestReport.xml"
        property "sonar.exclusions","**/domain/requests/**, **/domain/responses/**, **/controller/**, **/service/**, **/repository/**, **/config/**, **/security/**, **/exception/**, **/graphql/**, **/model/**"
    }
}

group = 'com.fontys'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}
dependencies {
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    implementation 'org.jetbrains:annotations:24.0.1'
    implementation 'org.projectlombok:lombok:1.18.34'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'mysql:mysql-connector-java:8.0.33'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    compileOnly 'org.projectlombok:lombok:1.18.34'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'com.h2database:h2'
    implementation 'org.flywaydb:flyway-mysql'
    implementation 'org.flywaydb:flyway-core'
    implementation 'mysql:mysql-connector-java:8.0.33'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-oauth2-client'
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}
test {
    finalizedBy jacocoTestReport
}